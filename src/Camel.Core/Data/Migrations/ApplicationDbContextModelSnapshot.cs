// <auto-generated />
using System;
using Camel.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Camel.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Camel.Core.Entities.Beatmap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("ApproachRate")
                        .HasColumnType("real")
                        .HasColumnName("approach_rate");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("approved_date");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("artist");

                    b.Property<string>("ArtistUnicode")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("artist_unicode");

                    b.Property<int>("BeatmapSource")
                        .HasColumnType("integer")
                        .HasColumnName("beatmap_source");

                    b.Property<float>("Bpm")
                        .HasColumnType("real")
                        .HasColumnName("bpm");

                    b.Property<float>("CircleSize")
                        .HasColumnType("real")
                        .HasColumnName("circle_size");

                    b.Property<string>("Creator")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("creator");

                    b.Property<string>("FileName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("file_name");

                    b.Property<bool>("Frozen")
                        .HasColumnType("boolean")
                        .HasColumnName("frozen");

                    b.Property<float>("HpDrain")
                        .HasColumnType("real")
                        .HasColumnName("hp_drain");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update");

                    b.Property<int>("MapsetId")
                        .HasColumnType("integer")
                        .HasColumnName("mapset_id");

                    b.Property<int>("MaxCombo")
                        .HasColumnType("integer")
                        .HasColumnName("max_combo");

                    b.Property<string>("Md5")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("md5");

                    b.Property<byte>("Mode")
                        .HasColumnType("smallint")
                        .HasColumnName("mode");

                    b.Property<float>("OverallDifficulty")
                        .HasColumnType("real")
                        .HasColumnName("overall_difficulty");

                    b.Property<int>("Passes")
                        .HasColumnType("integer")
                        .HasColumnName("passes");

                    b.Property<int>("Plays")
                        .HasColumnType("integer")
                        .HasColumnName("plays");

                    b.Property<string>("Source")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("source");

                    b.Property<float>("StarRate")
                        .HasColumnType("real")
                        .HasColumnName("star_rate");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("title");

                    b.Property<string>("TitleUnicode")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("title_unicode");

                    b.Property<int>("TotalLength")
                        .HasColumnType("integer")
                        .HasColumnName("total_length");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_beatmaps");

                    b.HasIndex("FileName")
                        .HasDatabaseName("ix_beatmaps_file_name");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_beatmaps_id");

                    b.HasIndex("MapsetId")
                        .HasDatabaseName("ix_beatmaps_mapset_id");

                    b.HasIndex("Md5")
                        .IsUnique()
                        .HasDatabaseName("ix_beatmaps_md5");

                    b.HasIndex("Mode")
                        .HasDatabaseName("ix_beatmaps_mode");

                    b.ToTable("beatmaps", (string)null);
                });

            modelBuilder.Entity("Camel.Core.Entities.LoginSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdaptersMd5")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("adapters_md5");

                    b.Property<string>("AdaptersStr")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("adapters_str");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_time");

                    b.Property<string>("DiskSignatureMd5")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("disk_signature_md5");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("ip_address");

                    b.Property<string>("OsuPathMd5")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("osu_path_md5");

                    b.Property<string>("OsuVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("osu_version");

                    b.Property<bool>("RunningUnderWine")
                        .HasColumnType("boolean")
                        .HasColumnName("running_under_wine");

                    b.Property<string>("UninstallMd5")
                        .HasColumnType("text")
                        .HasColumnName("uninstall_md5");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_login_sessions");

                    b.HasIndex("OsuVersion")
                        .HasDatabaseName("ix_login_sessions_osu_version");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_login_sessions_user_id");

                    b.ToTable("login_sessions", (string)null);
                });

            modelBuilder.Entity("Camel.Core.Entities.Profile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Discord")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("discord");

                    b.Property<string>("Twitter")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("twitter");

                    b.Property<string>("UserPage")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("user_page");

                    b.HasKey("Id")
                        .HasName("pk_profiles");

                    b.ToTable("profiles", (string)null);
                });

            modelBuilder.Entity("Camel.Core.Entities.Relationship", b =>
                {
                    b.Property<int>("FirstUserId")
                        .HasColumnType("integer")
                        .HasColumnName("first_user_id");

                    b.Property<int>("SecondUserId")
                        .HasColumnType("integer")
                        .HasColumnName("second_user_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("FirstUserId", "SecondUserId")
                        .HasName("pk_relationships");

                    b.HasIndex("SecondUserId")
                        .HasDatabaseName("ix_relationships_second_user_id");

                    b.ToTable("relationships", (string)null);
                });

            modelBuilder.Entity("Camel.Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Camel.Core.Entities.Score", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("Accuracy")
                        .HasColumnType("real")
                        .HasColumnName("accuracy");

                    b.Property<int?>("BeatmapId")
                        .HasColumnType("integer")
                        .HasColumnName("beatmap_id");

                    b.Property<int>("ClientFlags")
                        .HasColumnType("integer")
                        .HasColumnName("client_flags");

                    b.Property<int>("Count100")
                        .HasColumnType("integer")
                        .HasColumnName("count100");

                    b.Property<int>("Count300")
                        .HasColumnType("integer")
                        .HasColumnName("count300");

                    b.Property<int>("Count50")
                        .HasColumnType("integer")
                        .HasColumnName("count50");

                    b.Property<int>("CountGeki")
                        .HasColumnType("integer")
                        .HasColumnName("count_geki");

                    b.Property<int>("CountKatu")
                        .HasColumnType("integer")
                        .HasColumnName("count_katu");

                    b.Property<int>("CountMiss")
                        .HasColumnType("integer")
                        .HasColumnName("count_miss");

                    b.Property<int>("Grade")
                        .HasColumnType("integer")
                        .HasColumnName("grade");

                    b.Property<string>("MapMd5")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("map_md5");

                    b.Property<int>("MaxCombo")
                        .HasColumnType("integer")
                        .HasColumnName("max_combo");

                    b.Property<byte>("Mode")
                        .HasColumnType("smallint")
                        .HasColumnName("mode");

                    b.Property<int>("Mods")
                        .HasColumnType("integer")
                        .HasColumnName("mods");

                    b.Property<string>("OnlineChecksum")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("online_checksum");

                    b.Property<bool>("Perfect")
                        .HasColumnType("boolean")
                        .HasColumnName("perfect");

                    b.Property<float>("Pp")
                        .HasColumnType("real")
                        .HasColumnName("pp");

                    b.Property<int>("ScoreNum")
                        .HasColumnType("integer")
                        .HasColumnName("score_num");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer")
                        .HasColumnName("session_id");

                    b.Property<DateTime>("SetAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("set_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("TimeElapsed")
                        .HasColumnType("integer")
                        .HasColumnName("time_elapsed");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_scores");

                    b.HasIndex("BeatmapId")
                        .HasDatabaseName("ix_scores_beatmap_id");

                    b.HasIndex("MapMd5")
                        .HasDatabaseName("ix_scores_map_md5");

                    b.HasIndex("Mode")
                        .HasDatabaseName("ix_scores_mode");

                    b.HasIndex("Mods")
                        .HasDatabaseName("ix_scores_mods");

                    b.HasIndex("OnlineChecksum")
                        .IsUnique()
                        .HasDatabaseName("ix_scores_online_checksum");

                    b.HasIndex("Pp")
                        .HasDatabaseName("ix_scores_pp");

                    b.HasIndex("ScoreNum")
                        .HasDatabaseName("ix_scores_score_num");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("ix_scores_session_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_scores_status");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_scores_user_id");

                    b.HasIndex("MapMd5", "Status", "Mode")
                        .HasDatabaseName("ix_scores_map_md5_status_mode");

                    b.ToTable("scores", (string)null);
                });

            modelBuilder.Entity("Camel.Core.Entities.Stats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ACount")
                        .HasColumnType("integer")
                        .HasColumnName("a_count");

                    b.Property<float>("Accuracy")
                        .HasColumnType("real")
                        .HasColumnName("accuracy");

                    b.Property<int>("MaxCombo")
                        .HasColumnType("integer")
                        .HasColumnName("max_combo");

                    b.Property<byte>("Mode")
                        .HasColumnType("smallint")
                        .HasColumnName("mode");

                    b.Property<int>("PlayTime")
                        .HasColumnType("integer")
                        .HasColumnName("play_time");

                    b.Property<int>("Plays")
                        .HasColumnType("integer")
                        .HasColumnName("plays");

                    b.Property<short>("Pp")
                        .HasColumnType("smallint")
                        .HasColumnName("pp");

                    b.Property<long>("RankedScore")
                        .HasColumnType("bigint")
                        .HasColumnName("ranked_score");

                    b.Property<int>("ReplayViews")
                        .HasColumnType("integer")
                        .HasColumnName("replay_views");

                    b.Property<int>("SCount")
                        .HasColumnType("integer")
                        .HasColumnName("s_count");

                    b.Property<int>("SHCount")
                        .HasColumnType("integer")
                        .HasColumnName("sh_count");

                    b.Property<int>("TotalHits")
                        .HasColumnType("integer")
                        .HasColumnName("total_hits");

                    b.Property<long>("TotalScore")
                        .HasColumnType("bigint")
                        .HasColumnName("total_score");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("XCount")
                        .HasColumnType("integer")
                        .HasColumnName("x_count");

                    b.Property<int>("XHCount")
                        .HasColumnType("integer")
                        .HasColumnName("xh_count");

                    b.HasKey("Id")
                        .HasName("pk_stats");

                    b.HasIndex("Mode")
                        .HasDatabaseName("ix_stats_mode");

                    b.HasIndex("Pp")
                        .HasDatabaseName("ix_stats_pp");

                    b.HasIndex("RankedScore")
                        .HasDatabaseName("ix_stats_ranked_score");

                    b.HasIndex("TotalScore")
                        .HasDatabaseName("ix_stats_total_score");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_stats_user_id");

                    b.ToTable("stats", (string)null);
                });

            modelBuilder.Entity("Camel.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Country")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasDefaultValue("XX")
                        .HasColumnName("country");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_at");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_claims_role_id");

                    b.ToTable("role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claims_user_id");

                    b.ToTable("user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("ProviderKey", "LoginProvider")
                        .HasName("pk_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_logins_user_id");

                    b.ToTable("user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_tokens");

                    b.ToTable("user_tokens", (string)null);
                });

            modelBuilder.Entity("Camel.Core.Entities.LoginSession", b =>
                {
                    b.HasOne("Camel.Core.Entities.User", "User")
                        .WithMany("LoginSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_login_sessions_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Camel.Core.Entities.Profile", b =>
                {
                    b.HasOne("Camel.Core.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("Camel.Core.Entities.Profile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_profiles_users_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Camel.Core.Entities.Relationship", b =>
                {
                    b.HasOne("Camel.Core.Entities.User", "FirstUser")
                        .WithMany("Added")
                        .HasForeignKey("FirstUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_relationships_users_first_user_id");

                    b.HasOne("Camel.Core.Entities.User", "SecondUser")
                        .WithMany("AddedBy")
                        .HasForeignKey("SecondUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_relationships_users_second_user_id");

                    b.Navigation("FirstUser");

                    b.Navigation("SecondUser");
                });

            modelBuilder.Entity("Camel.Core.Entities.Score", b =>
                {
                    b.HasOne("Camel.Core.Entities.Beatmap", null)
                        .WithMany("Scores")
                        .HasForeignKey("BeatmapId")
                        .HasConstraintName("fk_scores_beatmaps_beatmap_id");

                    b.HasOne("Camel.Core.Entities.LoginSession", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_scores_login_sessions_session_id");

                    b.HasOne("Camel.Core.Entities.User", "User")
                        .WithMany("Scores")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_scores_users_user_id");

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Camel.Core.Entities.Stats", b =>
                {
                    b.HasOne("Camel.Core.Entities.User", "User")
                        .WithMany("Stats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stats_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Camel.Core.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_claims_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Camel.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_claims_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Camel.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_logins_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Camel.Core.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("Camel.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Camel.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_tokens_users_user_id");
                });

            modelBuilder.Entity("Camel.Core.Entities.Beatmap", b =>
                {
                    b.Navigation("Scores");
                });

            modelBuilder.Entity("Camel.Core.Entities.User", b =>
                {
                    b.Navigation("Added");

                    b.Navigation("AddedBy");

                    b.Navigation("LoginSessions");

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("Scores");

                    b.Navigation("Stats");
                });
#pragma warning restore 612, 618
        }
    }
}
